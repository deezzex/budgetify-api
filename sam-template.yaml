# sam build --template sam-template.yaml
# sam deploy --s3-bucket=budgetify-artifacts --stack-name=budgetify-api-stack --parameter-overrides dbEndpoint=budgetify-dev.cyyklmgt4uyj.eu-west-2.rds.amazonaws.com , dbName=budgetifydb , dbUsername=root , dbPassword=budgetify-password

AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: AWS Serverless Lambda -- Budgetify API

Parameters:
  dbEndpoint:
    Type: String
  dbName:
    Type: String
  dbUsername:
    Type: String
  dbPassword:
    Type: String
  securityGroup:
    Type: String
    Default: sg-04c6545de21aa0d07
  subnetId1:
    Type: String
    Default: subnet-092b3d3547ee292e0
  subnetId2:
    Type: String
    Default: subnet-0c4cbf3e8032d5f28
  subnetId3:
    Type: String
    Default: subnet-05508397166affd81
  iamRole:
    Type: String
    Default: arn:aws:iam::262391914540:role/iam_for_lambda

Resources:
  BudgetifyAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: STAGE
      Cors:
        AllowHeaders: "'*'"
        AllowMethods: "'*'"
        AllowOrigin: "'*'"

  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - java11
      ContentUri: ./common-library.zip
      Description: Common library
      LayerName: common-layer

  BudgetQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: budgets.fifo
      FifoQueue: true

  CreateUserLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: create-user-lambda
      Description: Microservice for creating users
      Handler: com.budgetify.Handler::handleRequest
      Runtime: java11
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 30
      CodeUri: user-service/create-user-lambda
      Role: !Ref iamRole
      Environment:
        Variables:
          DB_ENDPOINT: !Ref dbEndpoint
          DB_NAME: !Ref dbName
          DB_USERNAME: !Ref dbUsername
          DB_PASSWORD: !Ref dbPassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds:
          - !Ref subnetId1
          - !Ref subnetId2
          - !Ref subnetId3
      Events:
        BudgetifyAPI:
          Type: Api
          Properties:
            Path: /api/users
            Method: POST
            RestApiId:
              Ref: BudgetifyAPI
      Layers:
        - !Ref CommonLayer

  GetUserLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get-user-lambda
      Description: Microservice for getting user details
      Handler: com.budgetify.Handler::handleRequest
      Runtime: java11
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 30
      CodeUri: user-service/get-user-lambda
      Role: !Ref iamRole
      Environment:
        Variables:
          DB_ENDPOINT: !Ref dbEndpoint
          DB_NAME: !Ref dbName
          DB_USERNAME: !Ref dbUsername
          DB_PASSWORD: !Ref dbPassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds:
          - !Ref subnetId1
          - !Ref subnetId2
          - !Ref subnetId3
      Events:
        BudgetifyAPI:
          Type: Api
          Properties:
            Path: /api/users/{id}
            Method: GET
            RestApiId:
              Ref: BudgetifyAPI
      Layers:
        - !Ref CommonLayer

  ListUsersLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: list-users-lambda
      Description: Microservice for getting list of users
      Handler: com.budgetify.Handler::handleRequest
      Runtime: java11
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 30
      CodeUri: user-service/list-users-lambda
      Role: !Ref iamRole
      Environment:
        Variables:
          DB_ENDPOINT: !Ref dbEndpoint
          DB_NAME: !Ref dbName
          DB_USERNAME: !Ref dbUsername
          DB_PASSWORD: !Ref dbPassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds:
          - !Ref subnetId1
          - !Ref subnetId2
          - !Ref subnetId3
      Events:
        BudgetifyAPI:
          Type: Api
          Properties:
            Path: /api/users
            Method: GET
            RestApiId:
              Ref: BudgetifyAPI
      Layers:
        - !Ref CommonLayer

  DeleteUserLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: delete-user-lambda
      Description: Microservice for deleting users
      Handler: com.budgetify.Handler::handleRequest
      Runtime: java11
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 30
      CodeUri: user-service/delete-user-lambda
      Role: !Ref iamRole
      Environment:
        Variables:
          DB_ENDPOINT: !Ref dbEndpoint
          DB_NAME: !Ref dbName
          DB_USERNAME: !Ref dbUsername
          DB_PASSWORD: !Ref dbPassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds:
          - !Ref subnetId1
          - !Ref subnetId2
          - !Ref subnetId3
      Events:
        BudgetifyAPI:
          Type: Api
          Properties:
            Path: /api/users/{id}
            Method: DELETE
            RestApiId:
              Ref: BudgetifyAPI
      Layers:
        - !Ref CommonLayer

  LoginLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: login-lambda
      Description: Microservice for login
      Handler: com.budgetify.Handler::handleRequest
      Runtime: java11
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 30
      CodeUri: security-service/login-lambda
      Role: !Ref iamRole
      Environment:
        Variables:
          DB_ENDPOINT: !Ref dbEndpoint
          DB_NAME: !Ref dbName
          DB_USERNAME: !Ref dbUsername
          DB_PASSWORD: !Ref dbPassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds:
          - !Ref subnetId1
          - !Ref subnetId2
          - !Ref subnetId3
      Events:
        BudgetifyAPI:
          Type: Api
          Properties:
            Path: /api/login
            Method: POST
            RestApiId:
              Ref: BudgetifyAPI
      Layers:
        - !Ref CommonLayer

  LogoutLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: logout-lambda
      Description: Microservice for logout
      Handler: com.budgetify.Handler::handleRequest
      Runtime: java11
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 30
      CodeUri: security-service/logout-lambda
      Role: !Ref iamRole
      Environment:
        Variables:
          DB_ENDPOINT: !Ref dbEndpoint
          DB_NAME: !Ref dbName
          DB_USERNAME: !Ref dbUsername
          DB_PASSWORD: !Ref dbPassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds:
          - !Ref subnetId1
          - !Ref subnetId2
          - !Ref subnetId3
      Events:
        BudgetifyAPI:
          Type: Api
          Properties:
            Path: /api/logout
            Method: POST
            RestApiId:
              Ref: BudgetifyAPI
      Layers:
        - !Ref CommonLayer

  CreateAccountLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: create-account-lambda
      Description: Microservice for creating account
      Handler: com.budgetify.Handler::handleRequest
      Runtime: java11
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 30
      CodeUri: account-service/create-account-lambda
      Role: !Ref iamRole
      Environment:
        Variables:
          DB_ENDPOINT: !Ref dbEndpoint
          DB_NAME: !Ref dbName
          DB_USERNAME: !Ref dbUsername
          DB_PASSWORD: !Ref dbPassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds:
          - !Ref subnetId1
          - !Ref subnetId2
          - !Ref subnetId3
      Events:
        BudgetifyAPI:
          Type: Api
          Properties:
            Path: /api/accounts
            Method: POST
            RestApiId:
              Ref: BudgetifyAPI
      Layers:
        - !Ref CommonLayer

  GetAccountLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get-account-lambda
      Description: Microservice for getting account details
      Handler: com.budgetify.Handler::handleRequest
      Runtime: java11
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 30
      CodeUri: account-service/get-account-lambda
      Role: !Ref iamRole
      Environment:
        Variables:
          DB_ENDPOINT: !Ref dbEndpoint
          DB_NAME: !Ref dbName
          DB_USERNAME: !Ref dbUsername
          DB_PASSWORD: !Ref dbPassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds:
          - !Ref subnetId1
          - !Ref subnetId2
          - !Ref subnetId3
      Events:
        BudgetifyAPI:
          Type: Api
          Properties:
            Path: /api/accounts/{id}
            Method: GET
            RestApiId:
              Ref: BudgetifyAPI
      Layers:
        - !Ref CommonLayer

  ListAccountsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: list-accounts-lambda
      Description: Microservice for getting list of accounts
      Handler: com.budgetify.Handler::handleRequest
      Runtime: java11
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 30
      CodeUri: account-service/list-accounts-lambda
      Role: !Ref iamRole
      Environment:
        Variables:
          DB_ENDPOINT: !Ref dbEndpoint
          DB_NAME: !Ref dbName
          DB_USERNAME: !Ref dbUsername
          DB_PASSWORD: !Ref dbPassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds:
          - !Ref subnetId1
          - !Ref subnetId2
          - !Ref subnetId3
      Events:
        BudgetifyAPI:
          Type: Api
          Properties:
            Path: /api/accounts
            Method: GET
            RestApiId:
              Ref: BudgetifyAPI
      Layers:
        - !Ref CommonLayer

  CreateTransactionLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: create-transaction-lambda
      Description: Microservice for creating transaction
      Handler: com.budgetify.Handler::handleRequest
      Runtime: java11
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 30
      CodeUri: transaction-service/create-transaction-lambda
      Role: !Ref iamRole
      Environment:
        Variables:
          DB_ENDPOINT: !Ref dbEndpoint
          DB_NAME: !Ref dbName
          DB_USERNAME: !Ref dbUsername
          DB_PASSWORD: !Ref dbPassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds:
          - !Ref subnetId1
          - !Ref subnetId2
          - !Ref subnetId3
      Events:
        BudgetifyAPI:
          Type: Api
          Properties:
            Path: /api/transactions
            Method: POST
            RestApiId:
              Ref: BudgetifyAPI
      Layers:
        - !Ref CommonLayer

  GetTransactionLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get-transaction-lambda
      Description: Microservice for getting transaction details
      Handler: com.budgetify.Handler::handleRequest
      Runtime: java11
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 30
      CodeUri: transaction-service/get-transaction-lambda
      Role: !Ref iamRole
      Environment:
        Variables:
          DB_ENDPOINT: !Ref dbEndpoint
          DB_NAME: !Ref dbName
          DB_USERNAME: !Ref dbUsername
          DB_PASSWORD: !Ref dbPassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds:
          - !Ref subnetId1
          - !Ref subnetId2
          - !Ref subnetId3
      Events:
        BudgetifyAPI:
          Type: Api
          Properties:
            Path: /api/transactions/{id}
            Method: GET
            RestApiId:
              Ref: BudgetifyAPI
      Layers:
        - !Ref CommonLayer

  ListTransactionsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: list-transactions-lambda
      Description: Microservice for getting list of transaction
      Handler: com.budgetify.Handler::handleRequest
      Runtime: java11
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 30
      CodeUri: transaction-service/list-transactions-lambda
      Role: !Ref iamRole
      Environment:
        Variables:
          DB_ENDPOINT: !Ref dbEndpoint
          DB_NAME: !Ref dbName
          DB_USERNAME: !Ref dbUsername
          DB_PASSWORD: !Ref dbPassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds:
          - !Ref subnetId1
          - !Ref subnetId2
          - !Ref subnetId3
      Events:
        BudgetifyAPI:
          Type: Api
          Properties:
            Path: /api/transactions
            Method: GET
            RestApiId:
              Ref: BudgetifyAPI
      Layers:
        - !Ref CommonLayer

  CreateBudgetLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: create-budget-lambda
      Description: Microservice for creating budget
      Handler: com.budgetify.Handler::handleRequest
      Runtime: java11
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 30
      CodeUri: budget-service/create-budget-lambda
      Role: !Ref iamRole
      Environment:
        Variables:
          DB_ENDPOINT: !Ref dbEndpoint
          DB_NAME: !Ref dbName
          DB_USERNAME: !Ref dbUsername
          DB_PASSWORD: !Ref dbPassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds:
          - !Ref subnetId1
          - !Ref subnetId2
          - !Ref subnetId3
      Events:
        BudgetifyAPI:
          Type: Api
          Properties:
            Path: /api/budgets
            Method: POST
            RestApiId:
              Ref: BudgetifyAPI
      Layers:
        - !Ref CommonLayer

  UpdateBudgetSpentLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: update-budget-spent-lambda
      Description: Microservice for updating budget spent
      Handler: com.budgetify.Handler::handleRequest
      Runtime: java11
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 30
      CodeUri: budget-service/update-budget-spent-lambda
      Role: !Ref iamRole
      Environment:
        Variables:
          DB_ENDPOINT: !Ref dbEndpoint
          DB_NAME: !Ref dbName
          DB_USERNAME: !Ref dbUsername
          DB_PASSWORD: !Ref dbPassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds:
          - !Ref subnetId1
          - !Ref subnetId2
          - !Ref subnetId3
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt BudgetQueue.Arn
            BatchSize: 10
      Layers:
        - !Ref CommonLayer

  CreateBudgetCategoryLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: create-budget-category-lambda
      Description: Microservice for creating budget category
      Handler: com.budgetify.Handler::handleRequest
      Runtime: java11
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 30
      CodeUri: budget-service/create-budget-category-lambda
      Role: !Ref iamRole
      Environment:
        Variables:
          DB_ENDPOINT: !Ref dbEndpoint
          DB_NAME: !Ref dbName
          DB_USERNAME: !Ref dbUsername
          DB_PASSWORD: !Ref dbPassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds:
          - !Ref subnetId1
          - !Ref subnetId2
          - !Ref subnetId3
      Events:
        BudgetifyAPI:
          Type: Api
          Properties:
            Path: /api/budgets/categories
            Method: POST
            RestApiId:
              Ref: BudgetifyAPI
      Layers:
        - !Ref CommonLayer

  GetBudgetLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get-budget-lambda
      Description: Microservice for getting budget details
      Handler: com.budgetify.Handler::handleRequest
      Runtime: java11
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 30
      CodeUri: budget-service/get-budget-lambda
      Role: !Ref iamRole
      Environment:
        Variables:
          DB_ENDPOINT: !Ref dbEndpoint
          DB_NAME: !Ref dbName
          DB_USERNAME: !Ref dbUsername
          DB_PASSWORD: !Ref dbPassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds:
          - !Ref subnetId1
          - !Ref subnetId2
          - !Ref subnetId3
      Events:
        BudgetifyAPI:
          Type: Api
          Properties:
            Path: /api/budgets/{id}
            Method: GET
            RestApiId:
              Ref: BudgetifyAPI
      Layers:
        - !Ref CommonLayer

  ListBudgetsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: list-budgets-lambda
      Description: Microservice for getting list of budgets
      Handler: com.budgetify.Handler::handleRequest
      Runtime: java11
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 30
      CodeUri: budget-service/list-budgets-lambda
      Role: !Ref iamRole
      Environment:
        Variables:
          DB_ENDPOINT: !Ref dbEndpoint
          DB_NAME: !Ref dbName
          DB_USERNAME: !Ref dbUsername
          DB_PASSWORD: !Ref dbPassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds:
          - !Ref subnetId1
          - !Ref subnetId2
          - !Ref subnetId3
      Events:
        BudgetifyAPI:
          Type: Api
          Properties:
            Path: /api/budgets
            Method: GET
            RestApiId:
              Ref: BudgetifyAPI
      Layers:
        - !Ref CommonLayer

  CreateReportLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: create-report-lambda
      Description: Microservice for creating reports
      Handler: com.budgetify.Handler::handleRequest
      Runtime: java11
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 30
      CodeUri: report-service/create-report-lambda
      Role: !Ref iamRole
      Environment:
        Variables:
          DB_ENDPOINT: !Ref dbEndpoint
          DB_NAME: !Ref dbName
          DB_USERNAME: !Ref dbUsername
          DB_PASSWORD: !Ref dbPassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds:
          - !Ref subnetId1
          - !Ref subnetId2
          - !Ref subnetId3
      Events:
        BudgetifyAPI:
          Type: Api
          Properties:
            Path: /api/reports
            Method: POST
            RestApiId:
              Ref: BudgetifyAPI
      Layers:
        - !Ref CommonLayer

  GetReportLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get-report-lambda
      Description: Microservice for getting report details
      Handler: com.budgetify.Handler::handleRequest
      Runtime: java11
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 30
      CodeUri: report-service/get-report-lambda
      Role: !Ref iamRole
      Environment:
        Variables:
          DB_ENDPOINT: !Ref dbEndpoint
          DB_NAME: !Ref dbName
          DB_USERNAME: !Ref dbUsername
          DB_PASSWORD: !Ref dbPassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds:
          - !Ref subnetId1
          - !Ref subnetId2
          - !Ref subnetId3
      Events:
        BudgetifyAPI:
          Type: Api
          Properties:
            Path: /api/reports/{id}
            Method: GET
            RestApiId:
              Ref: BudgetifyAPI
      Layers:
        - !Ref CommonLayer

  ListReportsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: list-reports-lambda
      Description: Microservice for getting list of reports
      Handler: com.budgetify.Handler::handleRequest
      Runtime: java11
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 30
      CodeUri: report-service/list-reports-lambda
      Role: !Ref iamRole
      Environment:
        Variables:
          DB_ENDPOINT: !Ref dbEndpoint
          DB_NAME: !Ref dbName
          DB_USERNAME: !Ref dbUsername
          DB_PASSWORD: !Ref dbPassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds:
          - !Ref subnetId1
          - !Ref subnetId2
          - !Ref subnetId3
      Events:
        BudgetifyAPI:
          Type: Api
          Properties:
            Path: /api/reports
            Method: GET
            RestApiId:
              Ref: BudgetifyAPI
      Layers:
        - !Ref CommonLayer